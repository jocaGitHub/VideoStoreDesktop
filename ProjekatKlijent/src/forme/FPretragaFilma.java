/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Film;
import domen.Kopija;
import domen.Zaduzenje;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import kontroleri.KontrolerKomunikacije;
import modeli.ModelTabeleFilmovi;
import modeli.ModelTabeleKopija;

/**
 *
 * @author Joca
 */
public class FPretragaFilma extends javax.swing.JDialog {

    List<Film> listaFilmova;

    /**
     * Creates new form FPretragaFilma
     */
    public FPretragaFilma(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Rectangle bounds = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
        this.setBounds(bounds);
        listaFilmova = new ArrayList<>();
        popuniTabelu();
        jButton1.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtxtKriterijum = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblFilmovi = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jbtnUkloni = new javax.swing.JButton();
        jlblInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Unesite naziv");

        jtxtKriterijum.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jtxtKriterijumInputMethodTextChanged(evt);
            }
        });
        jtxtKriterijum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtKriterijumKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtKriterijumKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtKriterijumKeyTyped(evt);
            }
        });

        jtblFilmovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtblFilmovi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblFilmoviMouseClicked(evt);
            }
        });
        jtblFilmovi.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jtblFilmoviInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jtblFilmovi);

        jButton1.setText("Dodaj kopiju za odabrani film");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jbtnUkloni.setText("UkloniPretragu");
        jbtnUkloni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUkloniActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jlblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jtxtKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(jbtnUkloni)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnUkloni))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtblFilmoviMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblFilmoviMouseClicked
        int rbr = jtblFilmovi.getSelectedRow();
        if (rbr > 0) {
            jButton1.setVisible(true);
        }

    }//GEN-LAST:event_jtblFilmoviMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int rbr = jtblFilmovi.getSelectedRow();
        Film f = ((ModelTabeleFilmovi) jtblFilmovi.getModel()).vratiFilm(rbr);
        Kopija kopija = new Kopija();
        kopija.setFilm(f);
        kopija.setRbr(KontrolerKomunikacije.vratiRbKopije());
        kopija.setKopijaID(KontrolerKomunikacije.vratiNajveciID(kopija));

        boolean b = KontrolerKomunikacije.sacuvajKopiju(kopija, this);
        if (b == true) {
            ((ModelTabeleFilmovi) jtblFilmovi.getModel()).vratiFilm(rbr).setBr(((ModelTabeleFilmovi) jtblFilmovi.getModel()).vratiFilm(rbr).getBr() + 1);
            ((ModelTabeleFilmovi) jtblFilmovi.getModel()).osvezi();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jtxtKriterijumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtKriterijumKeyTyped
       if (jtxtKriterijum.getText().trim().isEmpty()) {
            jtblFilmovi.setModel(new ModelTabeleFilmovi(listaFilmova));
            jlblInfo.setText("");
        } else {
            String pretraga = jtxtKriterijum.getText().trim();
            List<Film> zaPretragu = new ArrayList<>();
            for (Film fff : listaFilmova) {
                zaPretragu.add(fff);
            }
            List<Film> novaLista = new ArrayList<>();
            for (Film f : zaPretragu) {
                if (f.getNaziv().contains(pretraga)) {

                } else {
                    novaLista.add(f);
                }
            }
            for (Film ff : novaLista) {
                zaPretragu.remove(ff);
            }
            if (zaPretragu.size() == 0) {
                jtblFilmovi.setModel(new ModelTabeleFilmovi(new ArrayList<>()));
                jlblInfo.setText("ne postoji film sa takvim nazivom");
            } else {
                jtblFilmovi.setModel(new ModelTabeleFilmovi(zaPretragu));
                jlblInfo.setText("");
            }
        }
    }//GEN-LAST:event_jtxtKriterijumKeyTyped

    private void jbtnUkloniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUkloniActionPerformed
        jtxtKriterijum.setText("");
        jlblInfo.setText("");
        jtblFilmovi.setModel(new ModelTabeleFilmovi(listaFilmova));
    }//GEN-LAST:event_jbtnUkloniActionPerformed

    private void jtblFilmoviInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jtblFilmoviInputMethodTextChanged
    }//GEN-LAST:event_jtblFilmoviInputMethodTextChanged

    private void jtxtKriterijumInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jtxtKriterijumInputMethodTextChanged
       
    }//GEN-LAST:event_jtxtKriterijumInputMethodTextChanged

    private void jtxtKriterijumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtKriterijumKeyPressed
        if (jtxtKriterijum.getText().trim().isEmpty()) {
            jtblFilmovi.setModel(new ModelTabeleFilmovi(listaFilmova));
        } else {
            String pretraga = jtxtKriterijum.getText().trim();
            List<Film> zaPretragu = new ArrayList<>();
            for (Film fff : listaFilmova) {
                zaPretragu.add(fff);
            }
            List<Film> novaLista = new ArrayList<>();
            for (Film f : zaPretragu) {
                if (f.getNaziv().contains(pretraga)) {

                } else {
                    novaLista.add(f);
                }
            }
            for (Film ff : novaLista) {
                zaPretragu.remove(ff);
            }
            if (zaPretragu.size() == 0) {
                jtblFilmovi.setModel(new ModelTabeleFilmovi(new ArrayList<>()));
            } else {
                jtblFilmovi.setModel(new ModelTabeleFilmovi(zaPretragu));
            }
        }
        
    }//GEN-LAST:event_jtxtKriterijumKeyPressed

    private void jtxtKriterijumKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtKriterijumKeyReleased
         if (jtxtKriterijum.getText().trim().isEmpty()) {
            jtblFilmovi.setModel(new ModelTabeleFilmovi(listaFilmova));
            jlblInfo.setText("");
        } else {
            String pretraga = jtxtKriterijum.getText().trim();
            List<Film> zaPretragu = new ArrayList<>();
            for (Film fff : listaFilmova) {
                zaPretragu.add(fff);
            }
            List<Film> novaLista = new ArrayList<>();
            for (Film f : zaPretragu) {
                if (f.getNaziv().contains(pretraga)) {

                } else {
                    novaLista.add(f);
                }
            }
            for (Film ff : novaLista) {
                zaPretragu.remove(ff);
            }
            if (zaPretragu.size() == 0) {
                jtblFilmovi.setModel(new ModelTabeleFilmovi(new ArrayList<>()));
                jlblInfo.setText("ne postoji film sa takvim nazivom");
                JOptionPane.showMessageDialog(this, "Sistem ne moze da nadje takav film");
            } else {
                jtblFilmovi.setModel(new ModelTabeleFilmovi(zaPretragu));
            }
        }
        
    }//GEN-LAST:event_jtxtKriterijumKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FPretragaFilma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FPretragaFilma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FPretragaFilma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FPretragaFilma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FPretragaFilma dialog = new FPretragaFilma(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnUkloni;
    private javax.swing.JLabel jlblInfo;
    private javax.swing.JTable jtblFilmovi;
    private javax.swing.JTextField jtxtKriterijum;
    // End of variables declaration//GEN-END:variables

    private void popuniTabelu() {
        listaFilmova = KontrolerKomunikacije.vratiListuFilmova(this);
        List<Kopija> listaKopija = KontrolerKomunikacije.vratiListuKopija(this);
        List<Zaduzenje> listaZaduzenja = KontrolerKomunikacije.uzmiZaduzenja(this);
        if (listaKopija != null) {
            for (Film f : listaFilmova) {
                List<Kopija> listaZaFilm = new ArrayList<>();
                List<Kopija> listaNevracenih = new ArrayList<>();

                for (Kopija k : listaKopija) {
                    if (k.getFilm().equals(f)) {
                        listaZaFilm.add(k);
                    }
                }
                for (Zaduzenje z : listaZaduzenja) {
                    for (Kopija k : listaZaFilm) {
                        if (z.getKopija().equals(k) && z.isStatusZaduzenja().equals("nije vraceno")) {
                            listaNevracenih.add(k);
                        }
                    }
                }
                for (Kopija k : listaNevracenih) {
                    listaZaFilm.remove(k);
                }
                f.setBr(listaZaFilm.size());
            }

        }
        jtblFilmovi.setModel(new ModelTabeleFilmovi(listaFilmova));
    }

}
